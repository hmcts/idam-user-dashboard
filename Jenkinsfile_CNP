#!groovy

properties([
  parameters([
    string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
    string(name: 'TEST_URL', defaultValue: 'https://idam-user-dashboard.aat.platform.hmcts.net', description: 'The URL you want to run tests against'),
    string(name: 'TESTING_SUPPORT_URL', defaultValue: 'https://idam-testing-support-api.aat.platform.hmcts.net', description: 'The URL for the testing support api')
  ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "idam"
def component = "user-dashboard"
def branchesToSync = ['nightly-dev']
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVar
  ]
}

def secrets = [
  'idam-idam-${env}': [
    secret('idam-user-dashboard-client-secret', 'CLIENT_SECRET'),
    secret('launchdarkly-sdk-key', 'LAUNCHDARKLY_SDK_KEY'),
    secret('smoke-test-user-username', 'SMOKE_TEST_USER_USERNAME'),
    secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
    secret('notify-api-key', 'NOTIFY_API_KEY'),
    secret('idam-functional-test-service-client-secret', 'FUNCTIONAL_TEST_SERVICE_CLIENT_SECRET')
  ]
]

withPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  disableLegacyDeployment()
  syncBranchesWithMaster(branchesToSync)

  afterSuccess('build') {
    yarnBuilder.yarn('build')
  }

  afterAlways('test') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "coverage/lcov-report",
      reportFiles          : "index.html",
      reportName           : "Code Coverage Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "test-output/unit",
      reportFiles          : "test-report.html",
      reportName           : "Unit Test Report"
    ]
  }

  afterAlways('smoketest:preview') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "test-output/smoke",
      reportFiles          : "test-report.html",
      reportName           : "Smoke Test Report"
    ]
  }

  afterAlways('smoketest:aat') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "test-output/smoke",
      reportFiles          : "test-report.html",
      reportName           : "Smoke Test Report"
    ]
  }

  afterAlways('functionalTest:preview') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output/functional/allure",
      reportFiles          : "index.html",
      reportName           : "Functional Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output/accessibility",
      reportFiles          : "all_results.html",
      reportName           : "Accessibility Test Report"
    ]
  }

  afterAlways('functionalTest:aat') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output/functional/allure",
      reportFiles          : "index.html",
      reportName           : "Functional Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "functional-output/accessibility",
      reportFiles          : "all_results.html",
      reportName           : "Accessibility Test Report"
    ]
  }
}

