#!groovy

properties([
  pipelineTriggers([cron('TZ=Europe/London\nH 12 * * 1-5')]),
  parameters([
    string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
    string(name: 'TEST_URL', defaultValue: 'https://idam-user-dashboard.aat.platform.hmcts.net', description: 'The URL you want to run tests against'),
    string(name: 'STRATEGIC_SERVICE_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The URL for idam-api'),
    string(name: 'TESTING_SUPPORT_URL', defaultValue: 'https://idam-testing-support-api.aat.platform.hmcts.net', description: 'The URL for the testing support api'),
    string(
      name: 'ZAP_URL_EXCLUSIONS',
      defaultValue: """
        -config globalexcludeurl.url_list.url\\(0\\).regex='https?:\\/\\/(?:.*site-web-public.*)+'
        -config globalexcludeurl.url_list.url\\(1\\).regex='https?:\\/\\/(?:.*hmcts-access.*)+'
      """
    )
    booleanParam(name: 'skipFortifyScan', defaultValue: false, description: 'Tick the checkbox for skip'),
    booleanParam(name: 'skipSecurityScanTests', defaultValue: false, description: 'Tick the checkbox for skip'),
    booleanParam(name: 'skipFullFunctionalTests', defaultValue: false, description: 'Tick the checkbox for skip'),
    booleanParam(name: 'skipCrossBrowserTest', defaultValue: false, description: 'Tick the checkbox for skip')
  ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "idam"
def component = "user-dashboard"
def urlExclusions = params.ZAP_URL_EXCLUSIONS

def secrets = [
  "idam-idam-${params.ENVIRONMENT}": [
    secret('smoke-test-user-username', 'SMOKE_TEST_USER_USERNAME'),
    secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
    secret('launchdarkly-sdk-key', 'LAUNCHDARKLY_SDK_KEY'),
    secret('notify-api-key', 'NOTIFY_API_KEY'),
    secret('idam-functional-test-service-client-secret', 'FUNCTIONAL_TEST_SERVICE_CLIENT_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

try {
  withNightlyPipeline(type, product, component) {
    loadVaultSecrets(secrets)
    if (params.ENVIRONMENT == 'aat' && !params.skipSecurityScanTests) {
      enableSecurityScan(
        urlExclusions: urlExclusions,
        scanType: "frontend"
      )
    }
    if (!params.skipFortifyScan) {
      enableFortifyScan('idam-idam-' + params.ENVIRONMENT)
    }
    if (!params.skipFullFunctionalTests) {
      enableFullFunctionalTest()
    }
    if (!params.skipCrossBrowserTest) {
      enableCrossBrowserTest()
    }


    afterAlways('fortify-scan') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

    afterAlways('fullFunctionalTest') {
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-output/functional/allure",
        reportFiles          : "index.html",
        reportName           : "Functional Test Report"
      ]


      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-output/accessibility",
        reportFiles          : "all_results.html",
        reportName           : "Accessibility Test Report"
      ]

      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/functional/reports/**/*'
    }

    afterAlways('crossBrowserTest') {
      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "functional-output/cross-browser/allure",
        reportFiles          : "index.html",
        reportName           : "Cross Browser Test Report"
      ]

      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/cross-browser/reports/**/*'
    }
  }
} catch (err) {
    node {
        onMaster() {
            def slackMessage = "IDAM User Dashboard nightly pipeline failed:"
            slackMessage += "\nLink to build ${BUILD_ID}:\n${BUILD_URL}"
            slackSend(
                channel: "#idam-nightly-pipelines",
                color: 'danger',
                message: slackMessage)
        }
    }
    throw err
}
