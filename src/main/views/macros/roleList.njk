{% from "dist/govuk/components/input/macro.njk" import govukInput %}
{% from "dist/govuk/components/checkboxes/macro.njk" import govukCheckboxes %}

{% macro roleList(params) %}
  {% set roleItems = [] %}
  {% for role in params.roles %}
    {% set roleItems =
      (roleItems.push({
      'text': role.name,
      'value': role.name,
      'checked': role.assigned if role.assigned else false,
      'disabled': not role.assignable,
      'attributes': {
        'data-role': role.name|lower
      }
    }), roleItems) %}
  {% endfor %}

  <div class="role-list {%- if params.classes %} {{ params.classes }}{% endif -%}" data-module="role-list" id="{{ params.id }}">
    {% if params.searchBox %}
      {{ govukInput({
        id: params.searchBox.id,
        attributes: {
          placeholder: params.searchBox.placeholder,
          "aria-label": "Role searchbox"
        },
        prefix: { text: params.searchBox.prefix|default('ðŸ”Ž', true) },
        classes: "role-list__search-box " + params.searchBox.classes
      }) }}

      {{ govukCheckboxes({
        name: "show-hidden",
        classes: "govuk-checkboxes--small",
        items: [
          {
            value: "showHidden",
            text: "Hide roles I cannot assign",
            checked: true
          }
        ]
      }) }}

      <script>
        document.addEventListener('DOMContentLoaded', function () {
          const hideCheckbox = document.getElementById('show-hidden');
          const roleList = document.getElementById('role-count');
          let previousContent = roleList.textContent;

          const disabledElements = document.querySelectorAll('input[type="checkbox"]:disabled');
          for (let i = 0; i < disabledElements.length; i++) {
              disabledElements[i].parentElement.style.display = 'none';
          }

          const checkTextChanges = () => {
            const currentContent = roleList.textContent;

            if (previousContent !== currentContent) {
              if (previousContent.includes('filtered') && !currentContent.includes('filtered')) {
                hideCheckbox.disabled = false;
                if (hideCheckbox.checked) {
                  const disabledElements = document.querySelectorAll('input[type="checkbox"]:disabled');
                  for (let i = 0; i < disabledElements.length; i++) {
                    disabledElements[i].parentElement.style.display = 'none';
                  }
                }
              } else if (!previousContent.includes('filtered') && currentContent.includes('filtered')) {
                hideCheckbox.disabled = true;
              }
              previousContent = currentContent;
            }
          };

          const observer = new MutationObserver(checkTextChanges);
          const config = { childList: true, characterData: true, subtree: true };
          observer.observe(roleList, config);

          hideCheckbox.addEventListener('change', function () {
            const disabledElements = document.querySelectorAll('input[type="checkbox"]:disabled');

            if (hideCheckbox.checked) {
              for (let i = 0; i < disabledElements.length; i++) {
                  disabledElements[i].parentElement.style.display = 'none';
              }
            } else {
              for (let i = 0; i < disabledElements.length; i++) {
                  disabledElements[i].parentElement.style.display = '';
              }
            }
          });
        });
      </script>

      <p id='role-count' class='role-list__number-of-roles govuk-hint'></p>
    {% endif %}

    <div class="role-list__list">
      {{ govukCheckboxes({
        name: params.name,
        classes: params.list.classes,
        items: roleItems
      }) }}
    </div>
  </div>
{% endmacro %}
